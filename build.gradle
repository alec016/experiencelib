plugins {
  id 'java-library'
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.neoforged.gradle.userdev' version '7.0.165'
  id "me.shedaniel.unified-publishing" version "0.1.13"
  id "io.freefair.lombok" version "8.6"
}

tasks.named('wrapper', Wrapper).configure {
  distributionType = Wrapper.DistributionType.BIN
}

base {
  archivesName = archives_base_name
  version = "${minecraft_version}-${mod_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java.withSourcesJar()

File transformer = rootProject.file("src/main/resources/META-INF/accesstransformer.cfg")

if (transformer.exists()) {
  minecraft.accessTransformers.file transformer
}

runs {
  configureEach {
    systemProperty 'forge.logging.markers', 'REGISTRIES'
    systemProperty 'forge.logging.console.level', 'debug'

    modSource project.sourceSets.main
  }

  client {
    systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
  }

  server {
    systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    argument '--nogui'
  }

  gameTestServer {
    systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
  }

  data {
    arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
  runtimeClasspath.extendsFrom localRuntime
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
}

dependencies {
  // lombok
  compileOnly "org.projectlombok:lombok:${project.lombok_version}"
  annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"
  implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
  var replaceProperties = [
      minecraft_version      : minecraft_version,
      minecraft_version_range: minecraft_version_range,
      neo_version            : neo_version,
      neo_version_range      : neo_version_range,
      loader_version_range   : loader_version_range,
      mod_id                 : mod_id,
      mod_name               : mod_name,
      mod_license            : mod_license,
      mod_version            : mod_version,
      mod_authors            : mod_authors,
      mod_description        : mod_description,
      mod_url                : mod_url,
      icon                   : icon,
      pack_format_number     : pack_format_number
  ]
  inputs.properties replaceProperties

  filesMatching(['META-INF/neoforge.mods.toml']) {
    expand replaceProperties
  }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
  publications {
    register('mavenJava', MavenPublication) {
      groupId = maven_group
      artifactId = archivesBaseName
      version = project.version
      from components.java

      pom {
        name = mod_name
        description = mod_description
        packaging = 'jar'
        scm {
          url = mod_github
        }
        issueManagement {
          system = 'github'
          url = mod_issues
        }
        licenses {
          license {
            name = mod_license
            distribution = 'repo'
          }
        }
        developers {
          developer {
            id = mod_authors
            name = mod_authors
            roles = ['developper']
          }
        }
      }
    }
  }
  repositories {
    maven {
      name = 'maven'
      url = 'D:\\local_maven'
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
  module {
    downloadSources = true
    downloadJavadoc = true
  }
}

unifiedPublishing {
  project {
    displayName = "[NeoForge]ExperienceLib-${minecraft_version}-${mod_version}"
    releaseType = "release"
    if (rootProject.file("CHANGELOG.md").exists()) {
      changelog = rootProject.file("CHANGELOG.md").text
    }
    gameVersions = ["${minecraft_version}", "1.21"]
    gameLoaders = ["neoforge"]
    mainPublication jar

    var CURSE_API_KEY = System.getenv("CURSEFORGE")
    if (CURSE_API_KEY != null) {
      curseforge {
        token = CURSE_API_KEY
        id = "1156551"
        gameVersions.addAll "Java 21"
      }
    }

    var MODRINTH_API_KEY = System.getenv("MODRINTH")
    if (MODRINTH_API_KEY != null) {
      modrinth {
        token = MODRINTH_API_KEY
        id = "SglcIh0L"
      }
    }
  }
}
